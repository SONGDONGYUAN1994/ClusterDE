// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matrix_multiplication_cpp
arma::mat matrix_multiplication_cpp(const arma::mat& x, const arma::mat& y, bool tx, bool ty, unsigned int cores);
RcppExport SEXP _ClusterDE_matrix_multiplication_cpp(SEXP xSEXP, SEXP ySEXP, SEXP txSEXP, SEXP tySEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type tx(txSEXP);
    Rcpp::traits::input_parameter< bool >::type ty(tySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_multiplication_cpp(x, y, tx, ty, cores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ClusterDE_matrix_multiplication_cpp", (DL_FUNC) &_ClusterDE_matrix_multiplication_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ClusterDE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
